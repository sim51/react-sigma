(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[447],{8158:(e,t,n)=>{"use strict";n.d(t,{G:()=>a,Z:()=>s});var o=n(7294),r=n(814);const a=e=>{let{code:t,title:n,children:a,mode:s="code"}=e;const[d,i]=(0,o.useState)(s);return o.createElement("div",{className:"code-preview"},o.createElement("div",{className:"header"},o.createElement("div",null,n&&o.createElement("h5",null,n)),o.createElement("div",{className:"switch"},o.createElement("button",{className:"button",onClick:()=>i("code"),disabled:"code"===d},"Code"),o.createElement("button",{className:"button",onClick:()=>i("preview"),disabled:"preview"===d},"Preview"))),o.createElement("div",{className:"content"},"preview"===d&&a,"code"===d&&o.createElement(r.Z,{language:"jsx"},t)))},s=a},8370:(e,t,n)=>{"use strict";n.d(t,{a:()=>g});var o=n(7294),r=n(2698),a=n.n(r),s=n(8925),d=n(1154),i=n(5506);const g=e=>{let{order:t,probability:n}=e;const{faker:r,randomColor:g}=(0,i.g)(),l=(0,s.Ys)(),{assign:u}=(0,d.f)(),c=(0,s.$j)(),m=(0,s.sG)(),p=(0,s.eP)(),[h,f]=(0,o.useState)(null);return(0,o.useEffect)((()=>{const e=new(a());for(let n=0;n<t;n++)e.addNode(n,{label:r.name.fullName(),size:r.datatype.number({min:4,max:20,precision:1}),color:g(),x:0,y:0});for(let o=0;o<t;o++)for(let r=o+1;r<t;r++)Math.random()<n&&e.addDirectedEdge(o,r),Math.random()<n&&e.addDirectedEdge(r,o);m(e),u(),c({enterNode:e=>f(e.node),leaveNode:()=>f(null)})}),[u,m,c,r.datatype,r.name,g,t,n]),(0,o.useEffect)((()=>{p({nodeReducer:(e,t)=>{const n=l.getGraph(),o={...t,highlighted:t.highlighted||!1};return h&&(e===h||n.neighbors(h).includes(e)?o.highlighted=!0:(o.color="#E2E2E2",o.highlighted=!1)),o},edgeReducer:(e,t)=>{const n=l.getGraph(),o={...t,hidden:!1};return h&&!n.extremities(e).includes(h)&&(o.hidden=!0),o}})}),[h,p,l]),null}},5506:(e,t,n)=>{"use strict";n.d(t,{g:()=>d});var o=n(7294),r=n(6377),a=n.n(r),s=n(2779);const d=()=>{const e=new URLSearchParams(window.location.search).get("seed");(0,o.useEffect)((()=>{e&&(a()(e,{global:!0}),s.We.seed(Math.random()))}),[e]);const t=(0,o.useMemo)((()=>()=>{let e="#";for(let t=0;t<6;t++)e+="0123456789abcdef".charAt(Math.floor(16*Math.random()));return e}),[]);return{faker:s.We,randomColor:t}}},9255:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>u,default:()=>f,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var o=n(7462),r=n(7294),a=n(3905),s=n(8158),d=n(8925),i=n(8370);const g=()=>{const e=()=>{const e=(0,d.$j)(),t=(0,d.Ys)(),[n,o]=(0,r.useState)(null);return(0,r.useEffect)((()=>{e({downNode:e=>{o(e.node),t.getGraph().setNodeAttribute(e.node,"highlighted",!0)},mouseup:e=>{n&&(o(null),t.getGraph().removeNodeAttribute(n,"highlighted"),t.setCustomBBox(t.getBBox()))},mousedown:e=>{},mousemove:e=>{if(n){const o=t.viewportToGraph(e);t.getGraph().setNodeAttribute(n,"x",o.x),t.getGraph().setNodeAttribute(n,"y",o.y),e.preventSigmaDefault(),e.original.preventDefault(),e.original.stopPropagation()}},touchup:e=>{n&&(o(null),t.getGraph().removeNodeAttribute(n,"highlighted"),t.setCustomBBox(t.getBBox()))},touchdown:e=>{},touchmove:e=>{if(n){const o=t.viewportToGraph(e.touches[0]);t.getGraph().setNodeAttribute(n,"x",o.x),t.getGraph().setNodeAttribute(n,"y",o.y),e.original.preventDefault(),e.original.stopPropagation()}}})}),[e,t,n]),null};return r.createElement(d.C6,{style:{height:"500px"}},r.createElement(i.a,{order:100,probability:.1}),r.createElement(e,null))},l={},u="Drag'n'Drop",c={unversionedId:"example/drag_n_drop",id:"example/drag_n_drop",title:"Drag'n'Drop",description:"By register some events on sigma, you can easely create a drag'ndrop feature.",source:"@site/docs/example/03_drag_n_drop.mdx",sourceDirName:"example",slug:"/example/drag_n_drop",permalink:"/react-sigma/docs/example/drag_n_drop",draft:!1,editUrl:"https://github.com/sim51/react-sigma/tree/main/packages/website/docs/example/03_drag_n_drop.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{},sidebar:"docs",previous:{title:"Events",permalink:"/react-sigma/docs/example/events"},next:{title:"Layouts",permalink:"/react-sigma/docs/example/layouts"}},m={},p=[],h={toc:p};function f(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"dragndrop"},"Drag'n'Drop"),(0,a.kt)("p",null,"By register some events on sigma, you can easely create a drag'ndrop feature."),(0,a.kt)("p",null,"Take a look at this demo"),(0,a.kt)(s.G,{code:'import React, { FC, useEffect, useState } from "react";\n\nimport "@react-sigma/core/lib/react-sigma.min.css";\nimport { SigmaContainer, useRegisterEvents, useSigma } from "@react-sigma/core";\n\nimport { GraphDefault } from "../GraphDefault";\n\nconst DragNdrop: FC = () => {\n  const GraphEvents: React.FC = () => {\n    const registerEvents = useRegisterEvents();\n    const sigma = useSigma();\n    const [draggedNode, setDraggedNode] = useState<string | null>(null);\n\n    useEffect(() => {\n      // Register the events\n      registerEvents({\n        downNode: (e) => {\n          setDraggedNode(e.node);\n          sigma.getGraph().setNodeAttribute(e.node, "highlighted", true);\n        },\n        mouseup: (e) => {\n          if (draggedNode) {\n            setDraggedNode(null);\n            sigma.getGraph().removeNodeAttribute(draggedNode, "highlighted");\n            \n            // Reset the bounding box around the whole graph\n            // so that a "See whole graph" Zoom control button\n            // would include dragged nodes if pressed.\n            sigma.setCustomBBox(sigma.getBBox());\n          }\n        },\n        mousedown: (e) => {\n          \n        },\n        mousemove: (e) => {\n          if (draggedNode) {\n            // Get new position of node\n            const pos = sigma.viewportToGraph(e);\n            sigma.getGraph().setNodeAttribute(draggedNode, "x", pos.x);\n            sigma.getGraph().setNodeAttribute(draggedNode, "y", pos.y);\n\n            // Prevent sigma to move camera:\n            e.preventSigmaDefault();\n            e.original.preventDefault();\n            e.original.stopPropagation();\n          }\n        },\n        touchup: (e) => {\n          if (draggedNode) {\n            setDraggedNode(null);\n            sigma.getGraph().removeNodeAttribute(draggedNode, "highlighted");\n            // Reset the bounding box around the whole graph\n            // so that a "See whole graph" Zoom control button\n            // would include dragged nodes if pressed.\n            sigma.setCustomBBox(sigma.getBBox());\n          }\n        },\n        touchdown: (e) => {\n          \n        },\n        touchmove: (e) => {\n          if (draggedNode) {\n            // Get new position of node\n            const pos = sigma.viewportToGraph(e.touches[0]);\n            sigma.getGraph().setNodeAttribute(draggedNode, "x", pos.x);\n            sigma.getGraph().setNodeAttribute(draggedNode, "y", pos.y);\n\n            // Prevent sigma to move camera:\n            e.original.preventDefault();\n            e.original.stopPropagation();\n          }\n        },\n      });\n    }, [registerEvents, sigma, draggedNode]);\n\n    return null;\n  };\n\n  return (\n    <SigmaContainer style={{ height: "500px" }}>\n      <GraphDefault order={100} probability={0.1} />\n      <GraphEvents />\n    </SigmaContainer>\n  );\n};\n\nexport default DragNdrop;\n',title:"Drag'n'drop nodes on the graph",mdxType:"CodePreview"},(0,a.kt)(g,{mdxType:"DragNdrop"})))}f.isMDXComponent=!0},5042:()=>{}}]);